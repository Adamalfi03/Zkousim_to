{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyObvlrPi8arngsUpp0gHfVd"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["CV1\n"],"metadata":{"id":"KexoXb7932bU"}},{"cell_type":"code","source":["#kachní typovaní\n","def zamnoukej(kocka):\n","  print(f\"Kocka {kocka[\"jmeno\"]} mnouka mnau mnau.\")\n","\n","def main():\n","  mica = {\n","  \"jmeno\": \"Mica\".\n","  \"vek\": 2,\n","  \"majitele\": [\"Roman\".\"Petr\"]\n","  }\n","  pavel = {\n","    \"jmeno\": \"Milan\".\n","    \"vek\": 30,\n","    \"majitele\": [\"Roman\".\"Petr\"]\n","    }\n","  zamnoukej(kocka=mica)\n"],"metadata":{"id":"VNrZc9ua35ch"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#initor - __init__()\n","\n","from typing import List\n","\n","class Kocka:\n","\n","  def __init__(self, jmeno, vek, majitele): #initor\n","    self._jmeno = jmeno                 #atributy/datove cleny\n","    self._vek = vek\n","    self._majitele = majitele           #_ = private dohodou --\n","\n","  @property                             #když property stačí print bez závorek - getter / accesor\n","  def jmeno(self):\n","    return \"Mnau, co je ti do toho mnau!\"\n","  @jmeno.setter\n","  def jmeno(self, value):\n","    self.jmeno = value if len(value > 3 else self.jmeno)\n","\n","   @property\n","   def vek(self):\n","    return self._vek\n","#pak print(mica.jmeno())\n","\n","\n","  #magické metody / dandr metody (pretezovani operatoru)\n","  def __ge__(self, other): #pretezovani operatoru =>\n","    if notisinstance(other, Kocka):\n","      raise exception(f\"Objekt {other} neni kocka!\")\n","    else:\n","      return self._vek >= other.vek\n","\n","\n","\n","\n","\n","\n","  #metody (funkce uvnitr trid)\n","  def mnoukej(self):\n","    print(f\"Kocka {self.jmeno} mnouka mnouk mnnouk.\")\n","\n","  def vykad_se(self, kam):\n","    print(f\"kocka {self.jmeno} se vykadila do {kam}\")\n","\n","\n","\n","def main():\n","  #objekt je instanci (zhmotněním) tridy\n","  mica = kocka(jmeno=\"Mica\", vek=2, majitele=[\"Petr\", \"Mialn\"])\n","  mica.mnoukej()\n","  flicek = Kocka(jmeno=\"Flicek Van Vader\", vek=3, majitele={\"Anakin\", \"Mojmír\"})\n","  flicek.vykad_se(kam =\"CPTO 6.13\")\n","  bajun = kocka(jmeno=\"Bajun\", vek=3, majitle=[\"Alex\"])\n","  print(mica >= bajun) #mica.__ge__(other=bajun)\n","\n","main()\n","\n"],"metadata":{"id":"1g9V0WTm62uw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#napište metodu, která přetěžuje operátor + a to tak, že pokud sectu dve kocky tak vznikne kotatko (nova kocka) Jmeno bude spojeni jmen obou kocek Vek = 1, majitele bue nahodny vyber z majitelu obou"],"metadata":{"id":"OuZBMUGKEiFx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def __add__(self, kocka):\n","  if not isintance(other, Kocka):\n","    raise Exception(f\"Objekt {other} neni kocka\")\n","  else:\n","    jmeno_kotatka = self.jmeno + other.jmeno\n","    vek_kotatka = 1\n","    majitele_kotatka = choice([self.majitele, other.majitele])\n","    return Kocka(jmeno_kotatka, vek_kotatka, majitele_kotatka)\n","\n","def main():\n","  mica = Kocka(jmeno=\"Mica\", vek=2, majitele=[\"Petr\", \"Mialn\"])\n","  bajun = Kocka(jmeno=\"Bajun\", vek=3, majitle=[\"Alex\"])\n","  kote = mica + bajun\n","  print(kote.jmeno)\n","\n","main()"],"metadata":{"id":"RmgW3wc7E5VH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#max_pocet_kocek = 10 #datovy slen tridy"],"metadata":{"id":"PJ5baOD_I1-G"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Lekce 2"],"metadata":{"id":"vf-Zb3x62idE"}},{"cell_type":"code","source":["class queue:\n","\n","  def __init__(self, memory, items = list()):\n","    self._items = items\n","    self._memory = memory\n","    if len(items) > memory:\n","      raise exception(\"Tolik itemů paměť nezvládne!\")\n","\n","  def enqueu(self, item):\n","    if self._available_memory > 0:\n","      self._items.append(item)\n","    else:\n","      print(\"Fronta je plná.\")\n","\n","  def dequeue(self):\n","    if not self._is_empty():\n","      return self._items_pop(0)\n","    else:\n","      print(\"Ve frontě už nikdo není.\")\n","\n","  def back(self):\n","    if not self._is_empty():\n","      return self._items[0]\n","    else:\n","      print(\"Ve frontě už nikdo není\")\n","\n","  def front(self):\n","    if not self._is_empty():\n","      return self._items[-1]\n","    else:\n","      print(\"Ve frontě už nikdo nestojí\")\n","\n","  def _memory_available(self):\n","    return self._memory - self._size()\n","\n","  def is_empty(self):\n","    return self._size == 0\n","\n","  def _size(self):\n","    return len(self._items)\n","\n","  def string(self):\n","    return str(self._items)\n","\n","def __main__():\n","  fronta = queue(5, (0.5))\n","  fronta.enqueu(\"Marek\")\n","  fronta.enqueu(True)\n","  fronta.enqueu(0)\n","  fronta.enqueu(\"Kateřína\")\n","  fronta.enqueu(5,6)\n","  fronta.dequeu()\n","  fronta.dequeu()\n","  print(frona)\n","  print(fronta.front())\n","  print(fronta.back())\n","\n","  if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"id":"dnhVT9fN2qNz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# seznam = [1,2,3,4,5,6,7,8,9]\n","# i = 0\n","\n","seznam = [1,4,3,2,9,1,8,7,4,3,5]\n","\n","\n","def binarni_trideni(serazeny_seznam, prvek):\n","  i = len(serazeny_seznam)//2\n","  while serazeny_seznam[i] != prvek:\n","    if prvek > serazeny_seznam[i]:\n","      serazeny_seznam = serazeny_seznam[1*i:]\n","    else:\n","      serazeny_seznam = serazeny_seznam[:i]\n","      i = len(serazeny_seznam)//2\n","  return i\n","\n","print(sorted(seznam))\n","print(binarni_trideni(sorted(seznam), 9))\n","\n"],"metadata":{"id":"qKcZf9Iw5-og"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["seznam = [5,8,3,2,1,5,7,6,2,1]\n","\n","def binarni_filtr(serazeny_seznam, prvek):\n","  i = len(serazeny_seznam)//2\n","  while serazeny_seznam[i] != prvek:\n","    if prvek > serazeny_seznam[i]:\n","      serazeny_seznam = serazeny_seznam[1*i:]\n","    else:\n","      serazeny_seznam = serazeny_seznam[:i]\n","      i = len(serazeny_seznam)//2\n","      return i\n","print(sorted(seznam))\n","print(binarni_filtr(sorted(seznam), 3))"],"metadata":{"id":"Aih7lAxOCj1x"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["seznam = [5,8,3,2,1,5,7,6,2,1]\n","\n","def hledej_cislo(seznam_cisel, cislo):\n","  if cislo in seznam_cisel:\n","    print(\"Tvé číslo je v seznamu!\")\n","  else:\n","    print(\"Tvé číslo v seznamu není!\")\n","\n","\n","print(sorted(seznam))\n","print(hledej_cislo(seznam,5))"],"metadata":{"id":"lkVXlqgkEnvh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["seznam = [1,1,2,2,2,3,3,4,5,5,5,5,6,6,7,8,9,9,9,9]\n","\n","n = len(seznam)\n","k = 9\n","\n","def nalezni_prvky(seznam, opakovani):\n","  opakujici_se_prvky = []\n","  for hledany_prvek in seznam:\n","    pocet = 0\n","    if hledany_prvek in opakujici_se_prvky:\n","      continue\n","    for prvek in seznam:\n","      if prvek == hledany_prvek:\n","        pocet += 1\n","      if pocet > opakovani:\n","        opakujici_se_prvky.append(hledany_prvek)\n","        break\n","  return opakujici_se_prvky\n","\n","print(nalezni_prvky(seznam, int(n/k)))"],"metadata":{"id":"xeEko-SaNlog"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Vyhledání extrémů\n","\n","def vyhledani_extremu(seznam):\n","  lokalni_max = 0\n","  maximum = seznam[lokalni_max]\n","  for prvek in range(1, len(seznam)):\n","    if seznam[prvek] > maximum:\n","      lokalni_max = prvek\n","      maximum = seznam[lokalni_max]\n","  return lokalni_max\n","\n","seznam = [1,5,4,3,8,7,2,6]\n","print(vyhledani_extremu(seznam))\n"],"metadata":{"id":"cEgx9WQi-vtw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Bubble sort\n","\n","seznam = [1,3,2,4]\n","\n","def bubble_sort(seznam):\n","  serazeno = True\n","  for i in range(len(seznam)-1):\n","    if seznam[i] > seznam[i+1]:\n","      seznam[i], seznam[i+1]\n","      serazeno = False\n","    if serazeno:\n","        break\n","\n","print(bubble_sort(seznam))\n"],"metadata":{"id":"UszbLV0ACriW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#serazeni jinak\n","\n","s = [1,3,2,4,5]\n","\n","\n","for i in range(len(s)-1):\n","  ie = i\n","  for j in range(i+1), len(s):\n","    if s[j] < s[ie]:\n","      ie = j\n","  s[i], s[ie] = s[ie], s[i]\n","\n","\n","\n","\n","\n","print(s)\n"],"metadata":{"id":"PPe8GH48Ifvn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#faboraciho\n","\n","def fib(n):\n","  if n < 2: return n\n","  return fib(n-2) + fib(n-1)\n","\n","print(fib(5))\n"],"metadata":{"id":"nAgaW3zvNigD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def quicksort(kolekce):\n","  if len(kolekce) <= 1:\n","    return kolekce\n","  pivot = kolekce[0]\n","  seznam_mensi = [x for x in kolekce[1:] if x <= pivot]\n","  seznam_vetsi = [x for x in kolekce[1:] if x > pivot]\n","  return quicksort(seznam_mensi) + [pivot] + quicksort(seznam_vetsi)\n","\n","kolekce = [1,2,3,1,4,2,3,5,1,0,3,2]\n","kolekce = quicksort(kolekce)\n","print(kolekce)"],"metadata":{"id":"hkPoHevuTGit"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Insertionsort z githubu\n","\n","def insertionsort(kolekce):\n","  for i in range(1, len(kolekce)):\n","    tmp = kolekce[i]\n","    j = i-1\n","    while j >= 0 and kolekce[j] > tmp:\n","      kolekce[j+1] = kolekce[j]\n","      j -= 1\n","    kolekce[j+1] = tmp\n","\n","kolekce = [1,5,4,3,2]\n","insertionsort(kolekce)\n","print(kolekce)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VoI6IkJgCFZt","executionInfo":{"status":"ok","timestamp":1710757691565,"user_tz":-60,"elapsed":4,"user":{"displayName":"Adam Mynařík","userId":"09707792523431895638"}},"outputId":"e87a33ae-5068-49fe-d7b5-695e2808b069"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 2, 3, 4, 5]\n"]}]},{"cell_type":"code","source":["def inssort(kolekce):\n","  for i in range(1, len(kolekce)):\n","    promenna = kolekce[i]\n","    j = i-1\n","    while j >= 0 and kolekce[j] > promenna:\n","      kolekce[j+1] = kolekce[j]\n","      j -= 1\n","    kolekce[j+1] = promenna\n","kollekce = [8,7,5,4,6,2,1,3]\n","inssort(kollekce)\n","print(kollekce)"],"metadata":{"id":"2eAC2C01G7I0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def countingsort(kolekce):\n","  cetnosti = [0 for i in range(max(kolekce)+1)]\n","  for i in range(len(kolekce)):\n","    cetnosti[k[i]] += 1\n","\n","  kumulativni_soucty = [cetnosti[0]]\n","  for i in range(1, len(cetnosti)):\n","    kumulativni_soucty.append(kumulativni_soucty[i-1] + cetnosti[i])\n","\n","  serazene_pole = [0 for i in range(len(kolekce))]\n","  for i in range(len(kolekce)-1,-1,-1):\n","    serazene_pole[kumulativni_soucty[kolekce[i]] - 1] = k[i]\n","    kumulativni_soucty[kolekce[i]] -= 1\n","\n","  return serazene_pole\n","\n","kolekce = [4,0,0,1,0,2,4,5,1]\n","kolekce = countingsort(kolekce)\n","print(k)\n"],"metadata":{"id":"cet1zXxuLvU3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#předtest\n","\n","#tinyurl.com/ki-pb-apr2-predtest1"],"metadata":{"id":"aymcQ9MbFVKU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["Lanovka = {kapacita, počet jízd, max_pocet_bezp_jizd}\n","Prodejce = {nálada, cena_jizda}\n","Pasažér = {jmeno, finance, vek}\n","Policie = {jmeno_hled_osoby, vek_hled_osoby}"],"metadata":{"id":"aIJxUOWnFkPS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class lanovka\n","\n","class prodejce\n","\n","class pasazer\n","\n","class policie"],"metadata":{"id":"J5fJ6WoUGouR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"eeU8E6Vf_NBl"},"execution_count":null,"outputs":[]}]}